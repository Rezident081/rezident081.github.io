{"version":3,"sources":["routes/Index/components/ListItem.tsx","routes/Index/components/List.tsx","routes/Index/index.tsx","redux/actions/profiles.ts","redux/constants/profiles.ts","routes/UserPage/index.tsx","redux/actions/user.ts","redux/constants/user.ts","App.tsx","serviceWorker.ts","redux/reducers/profiles.ts","redux/reducers/user.ts","redux/reducers/index.ts","redux/sagas/workers/getProfiles.ts","redux/sagas/workers/getUser.ts","redux/sagas/index.ts","redux/store/createStore.ts","index.tsx"],"names":["useStyles","makeStyles","theme","large","width","spacing","height","ListItem","React","memo","props","item","buttonClick","classes","Grid","container","xs","className","sm","md","to","login","Avatar","alt","src","avatar_url","direction","alignItems","justify","Button","variant","onClick","List","state","copyProfiles","itemPerPage","selectPage","openProfileInNewTab","profile","html_url","window","open","onPaginateChange","e","value","setState","this","start","end","Fragment","length","slice","map","i","key","Pagination","hidePrevButton","hideNextButton","count","page","shape","onChange","profiles","PureComponent","connect","store","data","Index","requestProfiles","Container","maxWidth","mapDispatchToProps","type","UserPage","placeholderName","placeholderLocation","placeholderDate","match","requestUser","params","name","user","date","created_at","moment","format","location","payload","withRouter","App","path","exact","Boolean","hostname","initialState","isRequestSuccess","isRequestError","combineReducers","action","getProfiles","call","axios","get","put","rootSaga","takeEvery","profilesWorker","userWorker","sagaMiddleware","createSagaMiddleware","middlewares","middlewareEnhancer","applyMiddleware","composedEnhancers","composeWithDevTools","preloadedState","createStore","rootReducer","run","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0147445f.chunk.js","sourcesContent":["import React from \"react\";\nimport IProfile from \"../../../interfaces/Profile\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Button from \"@material-ui/core/Button\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  large: {\n    width: theme.spacing(7),\n    height: theme.spacing(7),\n  },\n}));\n\ninterface IProps {\n  item: IProfile;\n  buttonClick: (profile: IProfile) => void;\n}\n\nconst ListItem = React.memo(function ListItem(props: IProps) {\n  const { item, buttonClick } = props;\n  const classes = useStyles();\n\n  return (\n    <Grid container xs={12} className=\"item-container\">\n      <Grid container xs={6}>\n        <Grid\n          item\n          xs={12}\n          sm={2}\n          md={2}\n          className=\"item-container-avatar\"\n        >\n          <Link to={`/user/${item.login}`}>\n            <Avatar\n              alt={item.login}\n              src={item.avatar_url}\n              className={classes.large}\n            />\n          </Link>\n        </Grid>\n        <Grid\n          item\n          xs={12}\n          sm={3}\n          md={3}\n          className=\"item-container-name\"\n        >\n          <Link to={`/user/${item.login}`}>{item.login}</Link>\n        </Grid>\n      </Grid>\n      <Grid\n        container\n        xs={6}\n        direction=\"row\"\n        alignItems=\"center\"\n        justify=\"flex-end\"\n      >\n        <Button\n          variant=\"contained\"\n          className=\"item-button\"\n          onClick={() => buttonClick(item)}\n        >\n          Кнопка\n        </Button>\n      </Grid>\n    </Grid>\n  );\n});\n\nexport default ListItem;\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport IProfile from \"../../../interfaces/Profile\";\nimport ListItem from \"../components/ListItem\";\nimport Pagination from \"@material-ui/lab/Pagination\";\n\ninterface IProps {\n  profiles?: IProfile[];\n}\ninterface IState {\n  copyProfiles: IProfile[];\n  itemPerPage: number;\n  selectPage: number;\n}\n\nclass List extends PureComponent<IProps, IState> {\n  state: IState = {\n    copyProfiles: [],\n    itemPerPage: 5,\n    selectPage: 1,\n  };\n\n  static getDerivedStateFromProps(props: IProps, state: IState) {\n    if (props.profiles && props.profiles.length > 0) {\n      return {\n        copyProfiles: [...props.profiles],\n      };\n    }\n    return null;\n  }\n\n  openProfileInNewTab = (profile: IProfile) => {\n    profile.html_url && window.open(profile.html_url);\n  }\n\n  onPaginateChange = (e: any, value: number) => {\n    this.setState({\n      selectPage: value,\n    });\n  };\n\n  render() {\n    const { copyProfiles, itemPerPage, selectPage } = this.state;\n    const start: number = itemPerPage * (selectPage - 1);\n    const end: number = start + itemPerPage;\n\n    return (\n      <React.Fragment>\n        <div className=\"list\">\n          {copyProfiles &&\n            copyProfiles.length > 0 &&\n            copyProfiles\n              .slice(start, end)\n              .map((profile: IProfile, i) => (\n                <ListItem key={i} item={profile} buttonClick={this.openProfileInNewTab} />\n              ))}\n          <div className=\"pagination\"></div>\n        </div>\n        {copyProfiles.length > itemPerPage && (\n          <Pagination\n            className=\"list-pagination\"\n            hidePrevButton\n            hideNextButton\n            count={copyProfiles.length / itemPerPage}\n            page={selectPage}\n            variant=\"outlined\"\n            shape=\"round\"\n            onChange={this.onPaginateChange}\n          />\n        )}\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (store: any) => ({\n  profiles: store.profiles.data,\n});\n\nexport default connect(mapStateToProps, null)(List);\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { requestProfiles } from \"../../redux/actions/profiles\";\nimport List from \"./components/List\";\nimport Container from \"@material-ui/core/Container\";\n\ninterface IProps {\n  requestProfiles: Function;\n}\ninterface IState {}\n\nclass Index extends PureComponent<IProps, IState> {\n  componentDidMount() {\n    const { requestProfiles } = this.props;\n    requestProfiles();\n  }\n  render() {\n    return (\n      <div className=\"main-page\">\n        <Container maxWidth='md'>\n          <List />\n        </Container>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  requestProfiles,\n};\n\nexport default connect(null, mapDispatchToProps)(Index);\n","import {\n  REQUEST_PROFILES,\n  REQUEST_PROFILES_ERROR,\n  REQUEST_PROFILES_SUCCESS,\n} from \"../constants/profiles\";\nimport IProfile from '../../interfaces/Profile';\n\nexport const requestProfiles = () => ({\n  type: REQUEST_PROFILES,\n});\n\nexport const requestProfilesSuccess = (payload: IProfile[]) => ({\n  type: REQUEST_PROFILES_SUCCESS,\n  payload,\n});\n\nexport const requestProfilesError = () => ({\n  type: REQUEST_PROFILES_ERROR,\n});\n","export const REQUEST_PROFILES = `profiles/REQUEST_PROFILES`;\nexport const REQUEST_PROFILES_SUCCESS = `profiles/REQUEST_PROFILES_SUCCESS`;\nexport const REQUEST_PROFILES_ERROR = `profiles/REQUEST_PROFILES_ERROR`;\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport { withRouter, RouteComponentProps } from \"react-router-dom\";\nimport { requestUser } from \"../../redux/actions/user\";\nimport Container from \"@material-ui/core/Container\";\nimport IUser from \"../../interfaces/User\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Grid from \"@material-ui/core/Grid\";\nimport moment from \"moment\";\n\ninterface IProps extends RouteComponentProps<{ name?: string }> {\n  user?: IUser;\n  requestUser: Function;\n}\ninterface IState {}\n\nclass UserPage extends PureComponent<IProps, IState> {\n  componentDidMount() {\n    const { match, requestUser } = this.props;\n    match.params && requestUser(match.params.name);\n  }\n\n  readonly placeholderName: string = \"None name\";\n  readonly placeholderLocation: string = \"None location\";\n  readonly placeholderDate: string = \"None date\";\n\n  render() {\n    const { user } = this.props;\n    const date = user?.created_at\n      ? \"From \" + moment(user?.created_at).format(\"DD/MM/YYYY\")\n      : this.placeholderDate;\n    return (\n      <Container maxWidth=\"md\">\n        <div className=\"user-page-inner\">\n          <Grid container alignItems=\"center\">\n            <Grid item xs={12} sm={2} md={2}>\n              <div className=\"user-image\">\n                <Avatar alt={user?.login} src={user?.avatar_url} />\n              </div>\n            </Grid>\n            <Grid item xs={12} sm={10} md={10}>\n              <h2 className=\"user-name\">\n                {user?.name || this.placeholderName}\n              </h2>\n              <p className=\"user-location\">\n                {user?.location || this.placeholderLocation}\n              </p>\n              <span className=\"user-from-date\">{date}</span>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state: any) => ({\n  user: state.user.data,\n});\n\nconst mapDispatchToProps = {\n  requestUser,\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(withRouter(UserPage));\n","import {\n  REQUEST_USER,\n  REQUEST_USER_ERROR,\n  REQUEST_USER_SUCCESS,\n} from \"../constants/user\";\nimport IUser from '../../interfaces/User';\n\n\nexport const requestUser = (name : string) => ({\n  type: REQUEST_USER,\n  payload : name\n});\n\nexport const requestUserSuccess = (payload: IUser) => ({\n  type: REQUEST_USER_SUCCESS,\n  payload,\n});\n\nexport const requestUserError = () => ({\n  type: REQUEST_USER_ERROR,\n});\n","export const REQUEST_USER = `profiles/REQUEST_USER`;\nexport const REQUEST_USER_SUCCESS = `profiles/REQUEST_USER_SUCCESS`;\nexport const REQUEST_USER_ERROR = `profiles/REQUEST_USER_ERROR`;","import React from \"react\";\nimport \"./App.css\";\nimport { HashRouter as Router, Switch, Route } from \"react-router-dom\";\nimport Index from './routes/Index/';\nimport UserPage from './routes/UserPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route path='/' exact>\n            <Index />\n          </Route>\n          <Route path='/user/:name' >\n            <UserPage />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\n  REQUEST_PROFILES_SUCCESS,\n  REQUEST_PROFILES_ERROR,\n} from \"../constants/profiles\";\n\nconst initialState = {\n  data: [],\n  isRequestSuccess: false,\n  isRequestError: false,\n};\n\nexport default function todos(state = initialState, action: any) {\n  switch (action.type) {\n    case REQUEST_PROFILES_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        isRequestSuccess: true,\n        isRequestError: false,\n      };\n    case REQUEST_PROFILES_ERROR:\n      return {\n        ...state,\n        data: [],\n        isRequestSuccess: false,\n        isRequestError: true,\n      };\n    default:\n      return state;\n  }\n}\n","import {\n  REQUEST_USER_SUCCESS,\n  REQUEST_USER_ERROR,\n} from \"../constants/user\";\n\nconst initialState = {\n  data: {},\n  isRequestSuccess: false,\n  isRequestError: false,\n};\n\nexport default function user(state = initialState, action: any) {\n  switch (action.type) {\n    case REQUEST_USER_SUCCESS:\n      return {\n        ...state,\n        data: action.payload,\n        isRequestSuccess: true,\n        isRequestError: false,\n      };\n    case REQUEST_USER_ERROR:\n      return {\n        ...state,\n        data: [],\n        isRequestSuccess: false,\n        isRequestError: true,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux'\nimport profileReducer from './profiles';\nimport userReducer from './user';\n\nexport default combineReducers({\n  profiles : profileReducer,\n  user: userReducer\n});","import { call, put } from \"redux-saga/effects\";\nimport {\n  requestProfilesSuccess,\n  requestProfilesError,\n} from \"../../actions/profiles\";\nimport axios from \"axios\";\n\nexport default function* getProfiles() {\n  try {\n    const { data } = yield call(axios.get, \"https://api.github.com/users\");\n    yield put(requestProfilesSuccess(data));\n  } catch (e) {\n    yield put(requestProfilesError());\n  }\n}\n","import { call, put } from \"redux-saga/effects\";\nimport { requestUserSuccess, requestUserError } from \"../../actions/user\";\nimport axios from \"axios\";\n\nexport default function* getProfiles(action: any) {\n  try {\n    const { data } = yield call(\n      axios.get,\n      `https://api.github.com/users/${action.payload}`\n    );\n    yield put(requestUserSuccess(data));\n  } catch (e) {\n    yield put(requestUserError());\n  }\n}\n","import { takeEvery } from \"redux-saga/effects\";\nimport profilesWorker from \"./workers/getProfiles\";\nimport userWorker from \"./workers/getUser\";\nimport { REQUEST_PROFILES } from \"../constants/profiles\";\nimport { REQUEST_USER } from \"../constants/user\";\n\nexport default function* rootSaga() {\n  yield [\n    yield takeEvery(REQUEST_PROFILES, profilesWorker),\n    yield takeEvery(REQUEST_USER, userWorker),\n  ];\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"../reducers/\";\nimport rootSaga from \"../sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst middlewares = [sagaMiddleware];\nconst middlewareEnhancer = applyMiddleware(...middlewares);\nconst composedEnhancers = composeWithDevTools(middlewareEnhancer);\n\nexport default function (preloadedState?: any) {\n  const store = createStore(rootReducer, preloadedState, composedEnhancers);\n  sagaMiddleware.run(rootSaga);\n\n  return store;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport createStore from \"./redux/store/createStore\";\n\nconst store = createStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}